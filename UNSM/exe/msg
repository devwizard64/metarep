#!/usr/bin/env python3

import sys
import os

import lang

def list_rstrip(l, v):
    x = l[:]
    while len(x) > 0 and x[-1] == v: x.pop(-1)
    return x

def list_split(l, v):
    x = l + [v]
    n = []
    while v in x:
        i = x.index(v)
        n.append(x[:i])
        x = x[i+1:]
    return n

def fmt_str(lst):
    return ", ".join(["0x%02X" % x for x in lst+[0xFF]])

def main(argv):
    if len(argv) != 3:
        print("usage: %s <output> <input>\n" % argv[0])
        return 1
    with open(argv[2], "r") as f: data = f.read()
    path = argv[1].rpartition(".")[0]
    name = path.rpartition(os.path.sep)[-1]
    ltbl = None
    ctbl = []
    stbl = []
    mtbl = []
    etbl = []
    for ln, line in enumerate(data.split("\n")):
        if line.startswith("$"):
            cmd, _, arg = line[1:].partition(":")
            cmd = cmd.strip()
            arg = [x.strip() for x in arg.split(";")]
            if cmd == "lang":
                ltbl = lang.table[arg[0]]
            else:
                m = False
                if cmd == "str":
                    label = arg[0]
                    t = arg[1]+" " if len(arg) > 1 else ""
                elif cmd == "multi":
                    label = arg[0]
                    t = (int(arg[1]), arg[2]+" " if len(arg) > 2 else "")
                elif cmd == "tbl":
                    label = "%s_%d" % (name, len(stbl))
                    t = "static "
                    stbl.append(label)
                    etbl.append(arg)
                elif cmd == "msg":
                    label = "%s_%d" % (name, len(mtbl))
                    t = "static "
                    mtbl.append((label, arg[0]))
                    etbl.append(arg[1:])
                else:
                    raise RuntimeError("bad cmd %d:'%s'" % (ln+1, cmd))
                ctbl.append([label, t, []])
            continue
        if line.startswith("#") or len(ctbl) == 0: continue
        line += "\n"
        i = 0
        while i < len(line):
            for s, c in ltbl:
                if line[i:].startswith(s):
                    ctbl[-1][-1] += c
                    i += len(s)
                    break
            else:
                raise RuntimeError("illegal character %d:%d:'%s'" % (
                    ln+1, i, s[i]
                ))
    data = ""
    for label, t, lst in ctbl:
        if type(t) == tuple:
            data += "%su8 str_%s[][%s] =\n{\n%s};\n" % (
                t[1], label, t[0], "".join([
                    "    {%s},\n" % fmt_str(lst)
                    for lst in list_split(list_rstrip(lst, 0xFE), 0xFE)
                ])
            )
        else:
            data +=  "%su8 str_%s[] = {%s};\n" % (
                t, label, fmt_str(list_rstrip(lst, 0xFE))
            )
    if len(stbl) > 0:
        data += ("\nu8 *str_%s[] =\n{\n" % name) + "".join([
            "    str_%s,\n" % label for label in stbl
        ]) + "    NULL,\n};\n"
    if len(mtbl) > 0:
        data += "\n" + "".join([
            "static MSG msg_%s = {%s, str_%s};\n" % (label, arg, label)
            for label, arg in mtbl
        ]) + ("\nMSG *msg_%s[] =\n{\n" % name) + "".join([
            "    &msg_%s,\n" % label for label, arg in mtbl
        ]) + "    NULL,\n};\n"
    with open(path + ".h", "w") as f: f.write(data)
    line = []
    s = "0"
    i = 0
    for arg in etbl:
        if len(arg) > 0 and arg[0] != "":
            if len(arg) > 1 and arg[1] != "":
                s = arg[1]
                i = 0
            line.append("#define %s ((%s)+%d)\n" % (arg[0].ljust(23), s, i))
        i += 1
    if len(line) > 0:
        hn = "".join([
            x if x in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" else "_"
            for x in (name+".inc.h").upper()
        ])
        data = (
            "#ifndef __%s__\n"
            "#define __%s__\n"
            "\n"
        ) % (hn, hn) + "".join(line) + (
            "\n"
            "#endif /* __%s__ */\n"
        ) % hn
        with open(path + ".inc.h", "w") as f: f.write(data)
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))
